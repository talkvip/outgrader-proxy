import org.gradle.api.internal.plugins.StartScriptGenerator

buildscript {
	repositories {
		mavenCentral()
	}
	
	dependencies {
		classpath group: 'com.kenshoo',					name: 'gradle-fpm',	version: gradleFpmVersion
	}
}


apply plugin: 'application'
apply plugin: 'fpm-packaging'

dependencies {
	compile project(':outgrader-proxy-core')
	compile project(':outgrader-proxy-properties')
	compile project(':outgrader-proxy-external')
	compile project(':outgrader-proxy-statistics')
	compile project(':outgrader-proxy-advertisment-processor')
	compile project(':outgrader-proxy-advertisment-storage')
	
	compile group: 'commons-daemon', name: 'commons-daemon', version: commonsDaemonVersion
}

mainClassName = 'com.outgrader.proxy.Outgrader'

startScripts {
	classpath += files('src/dist/config')
	
	//TODO: LN: 12.09.2013, will work for *nix only for now
	defaultJvmOpts = ['-server', '-XX:+AggressiveOpts', '-XX:+OptimizeStringConcat', '-Doutgrader.home=$APP_HOME']
	
	//TODO: LN: 06.10.2013, a big hack on Gradle Application plugin
	//hacking getResource method to return own script (with jscv run) instead of original one
	doFirst {
		def method = StartScriptGenerator.metaClass.getStaticMetaMethod('getResource', [String] as Class[])
		StartScriptGenerator.metaClass.static.getResource << { String resource ->
			if (resource.endsWith('unixStartScript.txt')) {
				file 'src/build/resources/unixJsvcTemplate.txt'
			} else {
				method.doMethodInvoke(delegate, resource)
			}
		}
	}
	
	doLast {
		def windowsScriptFile = file getWindowsScript()
		def unixScriptFile    = file getUnixScript()
		
		//fixing classpath problem and problem with escaping $
		windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\config', '%APP_HOME%\\config')
		unixScriptFile.text    = unixScriptFile.text.replace('$APP_HOME/lib/config', '$APP_HOME/config').replace('=\\$', '=$')
		
		unixScriptFile.text = unixScriptFile.text.replace('"$1"', '$1')
	}
}

packaging {
	dependencies = ['java-jsvc', 'openjdk-7-jdk']	
}

debian.dependsOn installApp

